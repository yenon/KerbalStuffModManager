/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kerbalstuff;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Basti
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jOptionPane1 = new javax.swing.JOptionPane();
        BSearch = new javax.swing.JButton();
        TFSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        LModDescription = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        BDownload = new javax.swing.JButton();
        BDelete = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        MenuSettings = new javax.swing.JMenu();
        ItemSetKSPDir = new javax.swing.JMenuItem();
        ItemIgnoreCerticicate = new javax.swing.JCheckBoxMenuItem();
        ItemDevTools = new javax.swing.JCheckBoxMenuItem();
        MenuDevelopment = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KerbalStuffModManager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                startup(evt);
            }
        });

        BSearch.setText("Search");
        BSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSearchActionPerformed(evt);
            }
        });

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jList1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        LModDescription.setText("<html><h1>KerbalStuff ModManager</h1><br>by yenon</html>");
        LModDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jScrollPane3.setViewportView(jList2);

        BDownload.setText("download selected version");
        BDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDownloadActionPerformed(evt);
            }
        });

        BDelete.setText("Delete");
        BDelete.setEnabled(false);
        BDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDeleteActionPerformed(evt);
            }
        });

        MenuFile.setText("File");

        jMenuItem2.setText("Check for mod updates");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        MenuFile.add(jMenuItem2);

        jMenuBar1.add(MenuFile);

        MenuSettings.setText("Settings");

        ItemSetKSPDir.setText("Set KSP directory");
        ItemSetKSPDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSetKSPDirActionPerformed(evt);
            }
        });
        MenuSettings.add(ItemSetKSPDir);

        ItemIgnoreCerticicate.setText("Ignore certificate of KerbalStuff.com");
        ItemIgnoreCerticicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemIgnoreCerticicateActionPerformed(evt);
            }
        });
        MenuSettings.add(ItemIgnoreCerticicate);

        ItemDevTools.setText("Enable developer tools");
        ItemDevTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemDevToolsActionPerformed(evt);
            }
        });
        MenuSettings.add(ItemDevTools);

        jMenuBar1.add(MenuSettings);

        MenuDevelopment.setText("Development");

        jMenuItem1.setText("Test version checker");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        MenuDevelopment.add(jMenuItem1);

        jMenuBar1.add(MenuDevelopment);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TFSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BSearch))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BDelete))
                    .addComponent(LModDescription, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LModDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BDownload)
                            .addComponent(BDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BSearch)
                            .addComponent(TFSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private KerbalStuff ks;
    private FrameLoading frameDownload;
    private String appDir, appHome = System.getProperty("user.home") + "/yenon/KerbalStuff", kspDir;
    Properties p;
    boolean ignoreCertificate = false;
    Mod m[] = new Mod[30];
    
    public String getAppDir(){
        return appDir;
    }
    public String getKspDir(){
        return kspDir;
    }
    
    public void modDownloadFinished() {
        frameDownload.dispose();
        int index = jList1.getSelectedIndex();
        if (index != -1) {
            BDelete.setEnabled(new File(appDir + "/modscfg/" + m[index].getName() + ".cfg").isFile());
        }
    }

    public void setKSPDir() {
        JOptionPane.showMessageDialog(this, "Please select any file in your KSP directory", appDir, JOptionPane.INFORMATION_MESSAGE);
        jFileChooser1.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                return new File(pathname.getParentFile().getAbsolutePath() + "/GameData").isDirectory() || pathname.isDirectory();
            }

            @Override
            public String getDescription() {
                return "KSP";
            }

        });
        if (jFileChooser1.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            kspDir = jFileChooser1.getSelectedFile().getParentFile().getAbsolutePath();
            p.setProperty("ksp_dir", kspDir);
            saveConfig();
        }
    }

    private void loadConfig() {
        try {
            p = new Properties();
            if (new File(appHome + "/main.cfg").isFile()) {
                FileInputStream fis = new FileInputStream(new File(appHome + "/main.cfg"));
                p.load(fis);
                fis.close();
            }
            kspDir = p.getProperty("ksp_dir", "");
            if ("".equals(kspDir)) {
                setKSPDir();
            }
            appDir = p.getProperty("app_dir", appHome);
            ignoreCertificate = Boolean.getBoolean(p.getProperty("ignore_certificate", "false"));
            ItemIgnoreCerticicate.setSelected(ignoreCertificate);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveConfig() {
        try {
            FileOutputStream fos = new FileOutputStream(appHome + "/main.cfg");
            p.store(fos, null);
            fos.close();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayModInfo(Mod m) {
        String content;
        content = "<html><h1>" + m.getName() + "</h1>"
                + "by " + m.getAuthor() + " (Version " + m.getMv()[0].getFriendlyVersion() + " for KSP " + m.getMv()[0].getKspVersion() + ")<br>"
                + "<h2>Description</h2>" + m.getShortDescription()
                + "</html>";
        LModDescription.setText(content);
        DefaultListModel dlm = new DefaultListModel();
        int i = 0;
        ModVersion v;
        while (i < m.getMv().length) {
            v = m.getMv()[i];
            content = "<html>" + v.getDownloadPath() + "<br>Version " + v.getFriendlyVersion() + " for KSP " + v.getKspVersion() + "</html>";
            dlm.add(i, content);
            i++;
        }
        jList2.setModel(dlm);
    }

    public void setResults(DefaultListModel lm) {
        jList1.setModel(lm);
    }

    private void BSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSearchActionPerformed
        jList1.setModel(new DefaultListModel());
        jList2.setModel(new DefaultListModel());
        LModDescription.setText("<html><h1>KerbalStuff ModManager</h1><br>by yenon</html>");
        
        m=KerbalStuff.searchMod(TFSearch.getText());
        int i=0;
        DefaultListModel dlm = new DefaultListModel();
        while (i<m.length&&m[i]!=null){
            dlm.addElement(m[i].getName());
            i++;
        }
        jList1.setModel(dlm);
    }//GEN-LAST:event_BSearchActionPerformed

    private void jList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseReleased
        int index = jList1.getSelectedIndex();
        if (index != -1) {
            displayModInfo(m[index]);
            BDelete.setEnabled(new File(appDir + "/modscfg/" + m[index].getName() + ".cfg").isFile());
        }
    }//GEN-LAST:event_jList1MouseReleased

    private void BDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDownloadActionPerformed
        int selMod = jList1.getSelectedIndex(), selVer = jList2.getSelectedIndex();
        if (selMod != -1 && selVer != -1) {
            try {
                Properties modProps = new Properties();
                Mod mv = m[selMod];
                if (new File(appDir + "/modscfg/" + mv.getName() + ".cfg").isFile()) {
                    FileInputStream fis = new FileInputStream(new File(appDir + "/modscfg/" + mv.getName() + ".cfg"));
                    modProps.load(fis);
                    fis.close();
                }
                modProps.setProperty("id", String.valueOf(mv.getID()));
                modProps.setProperty("version", mv.getMv()[selVer].getFriendlyVersion());
                FileOutputStream fos = new FileOutputStream(new File(appDir + "/modscfg/" + mv.getName() + ".cfg"));
                modProps.store(fos, null);
                fos.close();
                frameDownload = new FrameLoading();
                frameDownload.main(new String[0]);
                frameDownload.setVisible(true);
                ThreadDownloadMod tdm = new ThreadDownloadMod(this, frameDownload, m[selMod].getMv()[selVer], true);
                tdm.start();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_BDownloadActionPerformed

    private void startup(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_startup
        loadConfig();
        if (!new File(appDir + "/temp/").isDirectory()) {
            new File(appDir + "/temp/").mkdirs();
        }
        if (!new File(appDir + "/mods/").isDirectory()) {
            new File(appDir + "/mods/").mkdirs();
        }
        if (!new File(appDir + "/modscfg/").isDirectory()) {
            new File(appDir + "/modscfg/").mkdirs();
        }
    }//GEN-LAST:event_startup

    private void BDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDeleteActionPerformed
        int index = jList1.getSelectedIndex();
        if (index != -1) {
            BDelete.setEnabled(false);
            Properties modProps = new Properties();
            Mod mv = m[index];
            if (new File(appDir + "/modscfg/" + mv.getName() + ".cfg").isFile()) {
                try {
                    FileInputStream fis = new FileInputStream(new File(appDir + "/modscfg/" + mv.getName() + ".cfg"));
                    modProps.load(fis);
                    fis.close();
                    if (modProps.containsKey("dirs")) {
                        String[] delDirs = modProps.getProperty("dirs").split("\n");
                        int i = 0, j;
                        while (i < delDirs.length) {
                            File[] files = new File(delDirs[i]).listFiles();
                            if (files != null) {
                                j = 0;
                                while (j < files.length) {
                                    if (files[j].isFile()) {
                                        files[j].delete();
                                    }
                                    j++;
                                }
                            }
                            i++;
                        }
                        i = 0;
                        while (i < delDirs.length) {
                            new File(delDirs[i]).delete();
                            i++;
                        }
                        modProps.clear();
                    }
                    new File(appDir + "/modscfg/" + mv.getName() + ".cfg").delete();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_BDeleteActionPerformed

    private void ItemSetKSPDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSetKSPDirActionPerformed
        setKSPDir();
    }//GEN-LAST:event_ItemSetKSPDirActionPerformed

    private void ItemIgnoreCerticicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemIgnoreCerticicateActionPerformed
        ignoreCertificate = !ignoreCertificate;
        ItemIgnoreCerticicate.setSelected(ignoreCertificate);
        p.setProperty("ignore_certificate", String.valueOf(ignoreCertificate));
        saveConfig();
    }//GEN-LAST:event_ItemIgnoreCerticicateActionPerformed

    private void ItemDevToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemDevToolsActionPerformed
        MenuDevelopment.setVisible(ItemDevTools.isSelected());
    }//GEN-LAST:event_ItemDevToolsActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.out.println(Utilities.compareVersions(new String[]{"1.0.0.1", "1.0.0.0", "3.0", "2.0.8", "2.0.8.4"}));
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BDelete;
    private javax.swing.JButton BDownload;
    private javax.swing.JButton BSearch;
    private javax.swing.JCheckBoxMenuItem ItemDevTools;
    private javax.swing.JCheckBoxMenuItem ItemIgnoreCerticicate;
    private javax.swing.JMenuItem ItemSetKSPDir;
    private javax.swing.JLabel LModDescription;
    private javax.swing.JMenu MenuDevelopment;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenu MenuSettings;
    private javax.swing.JTextField TFSearch;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
