/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kerbalstuff;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Basti
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jOptionPane1 = new javax.swing.JOptionPane();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KerbalStuffModManager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                startup(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jList1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("<html><h1>KerbalStuff ModManager</h1><br>by yenon</html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jScrollPane3.setViewportView(jList2);

        jButton2.setText("download selected version");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        jMenuItem2.setText("Check for mod updates");
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Settings");

        jMenuItem1.setText("Set KSP directory");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Ignore Certificate of KerbalStuff.com");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private KerbalStuff ks;
    private FrameLoading frameDownload;
    private String appDir, appHome = System.getProperty("user.home") + "/yenon/KerbalStuff", kspDir;
    Properties p;
    boolean ignoreCertificate=false;

    public void modDownloadFinished() {
        frameDownload.dispose();
        int index = jList1.getSelectedIndex();
        if (index != -1) {
            jButton3.setEnabled(new File(appDir + "/mods/" + ks.getMod(index).getName() + ".cfg").isFile());
        }
    }

    public void setKSPDir() {
        JOptionPane.showMessageDialog(this, "Please select any file in your KSP directory", appDir, JOptionPane.INFORMATION_MESSAGE);
        jFileChooser1.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                return new File(pathname.getParentFile().getAbsolutePath() + "/GameData").isDirectory() || pathname.isDirectory();
            }

            @Override
            public String getDescription() {
                return "KSP";
            }

        });
        if (jFileChooser1.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            kspDir = jFileChooser1.getSelectedFile().getParentFile().getAbsolutePath();
            p.setProperty("ksp_dir", kspDir);
            saveConfig();
        }
    }

    private void loadConfig() {
        try {
            p = new Properties();
            if (new File(appHome + "/main.cfg").isFile()) {
                FileInputStream fis = new FileInputStream(new File(appHome + "/main.cfg"));
                p.load(fis);
                fis.close();
            }
            kspDir = p.getProperty("ksp_dir", "");
            if ("".equals(kspDir)) {
                setKSPDir();
            }
            appDir = p.getProperty("app_dir", appHome);
            ignoreCertificate = Boolean.getBoolean(p.getProperty("ignore_certificate","false"));
            jCheckBoxMenuItem1.setSelected(ignoreCertificate);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveConfig() {
        try {
            FileOutputStream fos = new FileOutputStream(appHome + "/main.cfg");
            p.store(fos, null);
            fos.close();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayModInfo(Mod m) {
        String content;
        content = "<html><h1>" + m.getName() + "</h1>"
                + "by " + m.getAuthor() + " (Version " + m.getMv()[0].getFriendlyVersion() + " for KSP " + m.getMv()[0].getKspVersion() + ")<br>"
                + "<h2>Description</h2>" + m.getShortDescription()
                + "</html>";
        jLabel1.setText(content);
        DefaultListModel dlm = new DefaultListModel();
        int i = 0;
        ModVersion v;
        while (i < m.getMv().length) {
            v = m.getMv()[i];
            content = "<html>" + v.getDownloadPath() + "<br>Version " + v.getFriendlyVersion() + " for KSP " + v.getKspVersion() + "</html>";
            dlm.add(i, content);
            i++;
        }
        jList2.setModel(dlm);
    }

    public void setResults(DefaultListModel lm) {
        jList1.setModel(lm);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jList1.setModel(new DefaultListModel());
        jList2.setModel(new DefaultListModel());
        jLabel1.setText("<html><h1>KerbalStuff ModManager</h1><br>by yenon</html>");
        ks = new KerbalStuff(this,ignoreCertificate);
        ks.searchMod(jTextField1.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseReleased
        int index = jList1.getSelectedIndex();
        if (index != -1) {
            displayModInfo(ks.getMod(index));
            jButton3.setEnabled(new File(appDir + "/mods/" + ks.getMod(index).getName() + ".cfg").isFile());
        }
    }//GEN-LAST:event_jList1MouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selMod = jList1.getSelectedIndex(), selVer = jList2.getSelectedIndex();
        if (selMod != -1 && selVer != -1) {
            try {
                Properties modProps = new Properties();
                Mod mv = ks.getMod(selMod);
                if (new File(appDir + "/mods/" + mv.getName() + ".cfg").isFile()) {
                    FileInputStream fis = new FileInputStream(new File(appDir + "/mods/" + mv.getName() + ".cfg"));
                    modProps.load(fis);
                    fis.close();
                }
                modProps.setProperty("id", String.valueOf(mv.getID()));
                modProps.setProperty("version", mv.getMv()[selVer].getFriendlyVersion());
                FileOutputStream fos = new FileOutputStream(new File(appDir + "/mods/" + mv.getName() + ".cfg"));
                modProps.store(fos, null);
                fos.close();
                frameDownload = new FrameLoading();
                frameDownload.main(new String[0]);
                frameDownload.setVisible(true);
                ThreadDownloadMod tdm = new ThreadDownloadMod(this, frameDownload, ks.getMod(selMod).getMv()[selVer], appDir, kspDir, true);
                tdm.start();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void startup(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_startup
        loadConfig();
        if (!new File(appDir + "/temp/").isDirectory()) {
            new File(appDir + "/temp/").mkdirs();
        }
        if (!new File(appDir + "/mods/").isDirectory()) {
            new File(appDir + "/mods/").mkdirs();
        }
    }//GEN-LAST:event_startup

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int index = jList1.getSelectedIndex();
        if (index != -1) {
            jButton3.setEnabled(false);
            Properties modProps = new Properties();
            Mod mv = ks.getMod(index);
            if (new File(appDir + "/mods/" + mv.getName() + ".cfg").isFile()) {
                try {
                    FileInputStream fis = new FileInputStream(new File(appDir + "/mods/" + mv.getName() + ".cfg"));
                    modProps.load(fis);
                    fis.close();
                    String[] delDirs = modProps.getProperty("dirs").split("\n");
                    int i = 0, j;
                    while (i < delDirs.length) {
                        File[] files = new File(delDirs[i]).listFiles();
                        j = 0;
                        while (j < files.length) {
                            if (files[j].isFile()) {
                                files[j].delete();
                            }
                            j++;
                        }
                        i++;
                    }
                    i = 0;
                    while (i < delDirs.length) {
                        new File(delDirs[i]).delete();
                        i++;
                    }
                    modProps.clear();
                    new File(appDir + "/mods/" + mv.getName() + ".cfg").delete();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        setKSPDir();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        ignoreCertificate=!ignoreCertificate;
        jCheckBoxMenuItem1.setSelected(ignoreCertificate);
        p.setProperty("ignore_certificate",String.valueOf(ignoreCertificate));
        saveConfig();
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
